/**
 * This class is generated by jOOQ
 */
package org.yesworkflow.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.yesworkflow.db.jooq.DefaultSchema;
import org.yesworkflow.db.jooq.Keys;
import org.yesworkflow.db.jooq.tables.records.ProgramRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Program extends TableImpl<ProgramRecord> {

	private static final long serialVersionUID = -923095601;

	/**
	 * The reference instance of <code>program</code>
	 */
	public static final Program PROGRAM = new Program();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProgramRecord> getRecordType() {
		return ProgramRecord.class;
	}

	/**
	 * The column <code>program.id</code>.
	 */
	public final TableField<ProgramRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>program.parent_id</code>.
	 */
	public final TableField<ProgramRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>program.begin_id</code>.
	 */
	public final TableField<ProgramRecord, Integer> BEGIN_ID = createField("begin_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>program.end_id</code>.
	 */
	public final TableField<ProgramRecord, Integer> END_ID = createField("end_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>program.name</code>.
	 */
	public final TableField<ProgramRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>program.qualified_name</code>.
	 */
	public final TableField<ProgramRecord, String> QUALIFIED_NAME = createField("qualified_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>program.is_workflow</code>.
	 */
	public final TableField<ProgramRecord, Boolean> IS_WORKFLOW = createField("is_workflow", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>program.is_function</code>.
	 */
	public final TableField<ProgramRecord, Boolean> IS_FUNCTION = createField("is_function", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * Create a <code>program</code> table reference
	 */
	public Program() {
		this("program", null);
	}

	/**
	 * Create an aliased <code>program</code> table reference
	 */
	public Program(String alias) {
		this(alias, PROGRAM);
	}

	private Program(String alias, Table<ProgramRecord> aliased) {
		this(alias, aliased, null);
	}

	private Program(String alias, Table<ProgramRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProgramRecord> getPrimaryKey() {
		return Keys.PK_PROGRAM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProgramRecord>> getKeys() {
		return Arrays.<UniqueKey<ProgramRecord>>asList(Keys.PK_PROGRAM);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ProgramRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ProgramRecord, ?>>asList(Keys.FK_PROGRAM_PROGRAM_1, Keys.FK_PROGRAM_ANNOTATION_2, Keys.FK_PROGRAM_ANNOTATION_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Program as(String alias) {
		return new Program(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Program rename(String name) {
		return new Program(name, null);
	}
}
