/**
 * This class is generated by jOOQ
 */
package org.yesworkflow.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.yesworkflow.db.jooq.DefaultSchema;
import org.yesworkflow.db.jooq.Keys;
import org.yesworkflow.db.jooq.tables.records.PortRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Port extends TableImpl<PortRecord> {

	private static final long serialVersionUID = 1074648618;

	/**
	 * The reference instance of <code>port</code>
	 */
	public static final Port PORT = new Port();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PortRecord> getRecordType() {
		return PortRecord.class;
	}

	/**
	 * The column <code>port.id</code>.
	 */
	public final TableField<PortRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>port.annotation_id</code>.
	 */
	public final TableField<PortRecord, Integer> ANNOTATION_ID = createField("annotation_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>port.program_id</code>.
	 */
	public final TableField<PortRecord, Integer> PROGRAM_ID = createField("program_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>port.data_id</code>.
	 */
	public final TableField<PortRecord, Integer> DATA_ID = createField("data_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>port.name</code>.
	 */
	public final TableField<PortRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>port.qualified_name</code>.
	 */
	public final TableField<PortRecord, String> QUALIFIED_NAME = createField("qualified_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>port.alias</code>.
	 */
	public final TableField<PortRecord, String> ALIAS = createField("alias", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>port.uri_template</code>.
	 */
	public final TableField<PortRecord, String> URI_TEMPLATE = createField("uri_template", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>port.is_inport</code>.
	 */
	public final TableField<PortRecord, Boolean> IS_INPORT = createField("is_inport", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>port.is_outport</code>.
	 */
	public final TableField<PortRecord, Boolean> IS_OUTPORT = createField("is_outport", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * Create a <code>port</code> table reference
	 */
	public Port() {
		this("port", null);
	}

	/**
	 * Create an aliased <code>port</code> table reference
	 */
	public Port(String alias) {
		this(alias, PORT);
	}

	private Port(String alias, Table<PortRecord> aliased) {
		this(alias, aliased, null);
	}

	private Port(String alias, Table<PortRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PortRecord> getPrimaryKey() {
		return Keys.PK_PORT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PortRecord>> getKeys() {
		return Arrays.<UniqueKey<PortRecord>>asList(Keys.PK_PORT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PortRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PortRecord, ?>>asList(Keys.FK_PORT_ANNOTATION_1, Keys.FK_PORT_PROGRAM_1, Keys.FK_PORT_DATA_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Port as(String alias) {
		return new Port(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Port rename(String name) {
		return new Port(name, null);
	}
}
